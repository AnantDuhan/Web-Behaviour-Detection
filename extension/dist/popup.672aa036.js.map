{"version":3,"sources":["settings.js","popup/popup.js"],"names":["defaultSettings","styling","backend","threshold","ranking","onlyTexts","enabled","thisSiteCheckId","withTab","tabCallback","chrome","tabs","query","active","currentWindow","tabDomain","tab","url","match","slice","getById","id","document","getElementById","saveOptions","event","storage","local","get","storedSettings","global","stored","thisSiteOnly","checked","thisSiteOnlyUpdated","target","switchedToThisSiteOnly","newSettings","value","switchedToGlobal","key","set","loadOptions","undefined","settings","Math","round","innerText","updateStatsText","stats","tabStats","positives","total","negatives","text","isNaN","percentageText","toFixed","main","querySelectorAll","forEach","el","onchange","onChanged","addListener","changes"],"mappings":"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","file":"popup.672aa036.js","sourceRoot":"..\\src","sourcesContent":["export const defaultSettings = {\r\n  styling: 'opacity',\r\n  backend: 'jsvader',\r\n  threshold: 0.5,\r\n  ranking: true,\r\n  onlyTexts: false,\r\n  enabled: false,\r\n}\r\n","import { defaultSettings } from '../settings.js'\r\n\r\nconst thisSiteCheckId = 'selected-thissiteonly-check';\r\n\r\nfunction withTab(tabCallback) {\r\n  chrome.tabs.query({\r\n    active: true,\r\n    currentWindow: true\r\n  }, (tabs) => {\r\n    tabCallback(tabs[0]);\r\n  });\r\n}\r\n\r\nfunction tabDomain(tab) {\r\n  return tab.url.match(/:\\/\\/[a-z0-9\\-._~%]+/gi)[0].slice(3)\r\n}\r\n\r\nfunction getById(id) {\r\n  return document.getElementById(id);\r\n}\r\n\r\nfunction saveOptions(event) {\r\n  chrome.storage.local.get(\r\n    { storedSettings: { global: defaultSettings } },\r\n    (stored) => {\r\n      const storedSettings = stored.storedSettings;\r\n      const thisSiteOnly = getById(thisSiteCheckId).checked;\r\n      const thisSiteOnlyUpdated = (event.target.id == thisSiteCheckId);\r\n      const switchedToThisSiteOnly = thisSiteOnlyUpdated && thisSiteOnly;\r\n\r\n      const newSettings = {\r\n        styling: getById('selected-styling').value,\r\n        backend: getById('selected-backend').value,\r\n        threshold: getById('selected-threshold').value / 100,\r\n        ranking: getById('selected-ranking-check').checked,\r\n        onlyTexts: getById('selected-onlytexts-check').checked,\r\n        enabled: getById('selected-enabled-check').checked || switchedToThisSiteOnly,\r\n      };\r\n\r\n      withTab((tab) => {        \r\n        const switchedToGlobal = thisSiteOnlyUpdated && !thisSiteOnly;\r\n        if (switchedToGlobal) {\r\n          // remove domain settings and restore global\r\n          delete storedSettings[tabDomain(tab)]; // delete tab settings\r\n        } else {\r\n          // update settings according to thisSiteOnly toggle\r\n          const key = thisSiteOnly ? tabDomain(tab) : 'global';\r\n          storedSettings[key] = newSettings;\r\n        }\r\n        chrome.storage.local.set({ storedSettings: storedSettings });\r\n        loadOptions(); // sync view in case view needs to change\r\n      });\r\n    });\r\n}\r\n\r\nfunction loadOptions() {\r\n  chrome.storage.local.get(\r\n    { storedSettings: { global: defaultSettings } },\r\n    (stored) => {\r\n      const storedSettings = stored.storedSettings;\r\n      withTab((tab) => {\r\n        // use this site settings if defined\r\n        getById('selected-thissiteonly-check').checked =\r\n            (storedSettings[tabDomain(tab)] !== undefined);\r\n\r\n        const settings = storedSettings[tabDomain(tab)] || storedSettings.global;\r\n        const threshold = Math.round(settings.threshold * 100);\r\n\r\n        getById('selected-styling').value = settings.styling;\r\n        getById('selected-backend').value = settings.backend;\r\n        getById('selected-threshold').value = threshold;\r\n        getById('threshold-text').innerText = `${threshold}%`;\r\n        getById('selected-ranking-check').checked = settings.ranking;\r\n        getById('selected-onlytexts-check').checked = settings.onlyTexts;\r\n        getById('selected-enabled-check').checked = settings.enabled;\r\n      });\r\n    }\r\n  );\r\n}\r\n\r\nfunction updateStatsText() {\r\n  chrome.storage.local.get(\r\n    { stats: {} },\r\n    (stored) => {\r\n      withTab((tab) => {\r\n        const tabStats = stored.stats[tab.id];\r\n        const positives = tabStats.total - tabStats.negatives;\r\n        let text = '';\r\n        if (!isNaN(positives)) {\r\n          const percentageText = `${(100 * positives / tabStats.total).toFixed(1)}%`;\r\n          text = `${percentageText} (${positives} / ${tabStats.total})`\r\n        }\r\n        getById('positivity-score').innerText = text;\r\n      });\r\n    });\r\n}\r\n\r\nfunction main() {\r\n  // options\r\n  loadOptions();\r\n  // add options listeners\r\n  document\r\n      .querySelectorAll('.stored-options')\r\n      .forEach(el => el.onchange = saveOptions);\r\n\r\n  // stats\r\n  updateStatsText();\r\n  // watch for stats changes\r\n  chrome.storage.onChanged.addListener(\r\n    (changes) => { if (changes.stats != null) updateStatsText() });\r\n}\r\n\r\nmain();\r\n\r\n"]}